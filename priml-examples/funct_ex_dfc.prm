priority High
priority Med
priority Low

order Low < Med
order Med < High

(*
fun spawn_at p c =
    spawn[p] { c }
*)
 
(* (* CORRECT compiles *)
main {
    t <- spawn_at High (ret 1);
    sync t
}
*)

(* (* CORRECT catches constraint violation {High} <= {Low} *)
main {
    t <- spawn_at Low (ret 1);
    spawn[High] { sync t }
}
*)


fun spawn_at_and_sync_at_any p =
    cmd {
        td <- spawn[p] { ret 1 };
        sync td
    }


(* CORRECT compiles *)
main {
    spawn_at_and_sync_at_any Low
}


(* CORRECT compiles *)
(*
main {
    spawn[Low] {
        spawn_at_and_sync_at_any Low
    }
}
*)


(*
(* CORRECT catches constraint violation {High} <= {Low} *)
main {
    spawn[High] {
        spawn_at_and_sync_at_any Low
    }
}
*)


(*
fun spawn_at_and_sync_at p =
    cmd {
        td <- spawn[p] { ret 1 };
        spawn[p] { sync td }
    }


(* CORRECT compiles *)
main {
    spawn_at_and_sync_at (if true then Low else High)
}
*)
(*

case p of 
    SOME p' =>
        cmd {
            td <- spawn[p'] { c };
            spawn[p'] { sync td }
        }

let val p' = p in
        cmd {
            td <- spawn[p'] { c };
            spawn[p'] { sync td }
        }
        *)
