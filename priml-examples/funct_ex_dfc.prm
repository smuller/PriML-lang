priority High
priority Med
priority Low

order Low < Med
order Med < High

(*
fun spawn_at p c =
    spawn[p] { c }
*)
 
(* (* CORRECT compiles *)
main {
    t <- spawn_at High (ret 1);
    sync t
}
*)

(* (* CORRECT catches constraint violation {High} <= {Low} *)
main {
    t <- spawn_at Low (ret 1);
    spawn[High] { sync t }
}
*)

(*
fun spawn_at_and_sync_at_any p c =
    cmd {
        td <- spawn[p] { c };
        sync td
    }
*)

(* (* CORRECT compiles *)
main {
    spawn_at_and_sync_at_any Low (ret 1)
}
*)

(* (* CORRECT catches constraint violation {High} <= {Low} *)
main {
    spawn[High] {
        spawn_at_and_sync_at_any Low (ret 1)
    }
}
*)



fun spawn_at_and_sync_at p c =
    cmd {
        td <- spawn[p] { c };
        spawn[p] { sync td }
    }


(* BAD says {High, Low} !<= {High, Low} *)
main {
    spawn_at_and_sync_at (if true then Low else High) (ret 1)
}



case p of 
    SOME p' =>
        cmd {
            td <- spawn[p'] { c };
            spawn[p'] { sync td }
        }

let val p' = p in
        cmd {
            td <- spawn[p'] { c };
            spawn[p'] { sync td }
        }