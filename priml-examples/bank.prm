priority query_p
priority debit_p
priority credit_p
priority loop_p

order debit_p < credit_p
order credit_p < loop_p
order query_p < loop_p

extern val String.make : int -> char -> string

extern type in_channel
extern val stdin : in_channel
extern val input_line : in_channel -> string

fun cat (_, _) = " "
(*
fun str (_: char) = " "
*)
fun array _ = ()
fun update (_, _, _) = ()
fun isSpace _ = false
fun tokens _ _ = nil


fun hd l =
  case l of
    nil => ""
  | h::t => h

fun nth (l, n) =
  case l of
    nil => ""
  | h::t => if n = 0 then h else nth (t, n - 1)

fun fromString _ = SOME 0
fun toString _ = ""

fun print _ = () 

fun sub _ = 0

fun isPrefix _ _ = true

val accounts = array (10, 0)

fun loop () =
    let val line = input_line stdin in
        let val toks = tokens isSpace line
            val c = tokens
            val acct = case fromString (nth (toks, 1))
                        of SOME n => n
                         | NONE => 0
        in
            if isPrefix "credit" c then
                cmd {
                    spawn[credit_p]
                         {ret (update (accounts, acct,
                                              (sub (accounts, acct))
                                              + (
                                                    case fromString (nth (toks, 2))
                        of SOME n => n
                         | NONE => 0)))};
                    loop ()
                }
            else if isPrefix "debit" c then
                cmd {
                    spawn[credit_p]
                         { ret (update (accounts, acct,
                                               (sub (accounts, acct)) -
                                                    (case fromString (nth (toks, 2))
                        of SOME n => n
                         | NONE => 0)))};
                    loop ()
                }
            else if isPrefix "query" c then
                cmd {
                    spawn[query_p]
                         { ret (print (cat (toString (sub (accounts, acct)), "\n"))) };
                    loop ()
                }
            else loop ()
        end
	end

main
{
  t <- spawn[loop_p] {loop ()};
  sync t
}
