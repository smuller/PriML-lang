priority A
priority B

 
main {

(* (* CORRECT compiles *)

    ret (let val x = A in B end)
*)

(* (* BAD compiles, but empty psevar due to broken extra psevar in sum pattern *)

    ret (if true then A else B)
*)


(* (* BAD compiles, but empty psevar due to broken extra psevar in sum pattern *)

    ret (let val x = A in if true then x else B end)
*)


 (* CORRECT compiles *)

    t <- let val x = A 
         in spawn[x] { ret 1 } 
         end;
    x <- sync t;
    ret x


(*
    (* CORRECT type error on first cons *)
    ret (1 :: "hi" :: nil)
*)

(*
    (* CORRECT type error on first cons *)
    ret (cons (1, cons ("hi", nil)))
*)

(*
    (* CORRECT compiles *)
    ret (0 :: 1 :: nil)
*)

(*
    (* CORRECT compiles -- alternate syntax *)
    ret (cons (0, cons (1, nil)))
*)

}



